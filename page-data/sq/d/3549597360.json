{"data":{"strapiHomepage":{"hero":{"title":"豆腐碎碎念"},"seo":{"metaTitle":"豆腐碎碎念","metaDescription":"豆腐大叔的碎碎念部落格","shareImage":{"publicURL":"/blog/static/604cf13ec28f3cef60ce45b334104d6e/0ed368b625d55a74594affabb4c76874.png"}}},"allStrapiArticle":{"edges":[{"node":{"strapiId":19,"slug":"owasp-depedency-check-log4-shell","title":"OWASP depedency-check工具 與 Log4Shell漏洞","publishedAt":"2021-12-24T12:00:00.000Z","content":"巨人的肩膀\n--------------  \n「站在巨人的肩上, 不要從頭開發輪子」, 是我們這代工程師在學生時期被教育的觀念~  \n然而事情總是一體兩面, 當大家都採用OpenSource library時, 一旦library發現漏洞, 就會遍地開花~ 讓心懷不軌的技術人員有到處可以開採的機器和網站~  \n\n然而這代表站在巨人腳上有問題嗎? 不是~ 沒有問題~  \n因為如果你今天如果不是用OpenSource library而是自己開發的Library，我估計你開發的library若有漏洞別說是修正，就連發覺都很困難，最後導致漏洞被利用了大半，自己卻還是不自知~  \n反觀此次Log4shell漏洞事件，雖然陸續傳出多個網站被開採，但是也因如此，Apache對Log4j相對應修補速度也是相當的快速的~ 此外還有很多大型單位也陸續開發並釋出漏洞掃描等配套用來解決問題的工具~  \n  \n\nLog4shell漏洞事件歷程\n---------------------------  \n讓我們從ITHome發布的新聞來回顧Log4shell漏洞事件, \n[ITHome Log4shell相關新聞](https://www.google.com/search?q=log4shell+site:www.ithome.com.tw&tbm=nws), 從微軟、蘋果、Twitter接著再到比利時國防部和NASA等遍地開花, 好消息是[近日CISA也釋出了掃描工具](https://www.ithome.com.tw/news/148543), 幫助各單位可以用來掃描是否有相關漏洞需要修補~   \n然而我也注意到可能是此次Log4shell影響重大的關係,[ MavenRepository也開始在其網頁針新增\"Vulnerabilities\"欄位](https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core), 針對各library版本提供其包含漏洞的提醒，讓開法者能一目了然，進而進一步的盡快做相依library版本升級的作業~ 個人覺得相當的實用~  \n![_FIX_mvn_vul_col.png](93f5d938ba2072b4597ed03c7bc8a069.png)\n\n\n  \n\n修補\n---------------------------  \n對於身為開發者的我們來說，CISA的掃瞄已經是算在比較後面的防線了~ 屬於黑箱的掃瞄~   \n接著讓我們來說說白箱的掃瞄~  \n現主時我們手上有許多的專案原始碼檔案，我們想針對手上的專案使用的OpenSource library是否有漏洞, 當然可以查詢上面的MavenRepository來看是否包含漏洞，但是當用的library多時，或手上的專案數量龐大時，這是呆呆的作法~  \n最好是有一套工具，可以自動化檢查這些專案相依的library掃描是否包含漏洞，詳列報告出來讓我們能一一回頭去升級修整，最好還能整合CI/CD當專案build時就能一併做一次掃瞄檢查，滴水不漏~  \n\n\nOWASP Dependency-Check\n---------------------------------\n有的，當然有，還不用錢~  \n就是這套 [OWASP Dependency-Check](https://owasp.org/www-project-dependency-check/) ~~  \n不只是可透過command-line來呼叫執行掃描，另外還支援許多的Plugin，Ant、Maven、Gradle三大Java生態的build工具都能整~  \n另外還有SonarQube的Plugin來整合SonarQube, 來讓我們完善後續的漏洞記錄管理~  \n![_FIX_Original 2021-12-24 15_45_11-OWASP Dependency-Check Project _ OWASP — Mozilla Firefox.png](1d2d49f89c8be0ab790b1e8f72ee2321.png)  \n掃描後的輸出報表格式支援有HTML, XML, CSV, JSON, JUNIT, SARIF~   \n  \n\n當然工具到手後，就迫不及待的馬上弄個小專案來試試看，下列是掃描後輸出的報表:  \n![2021-12-24 15_52_03-Dependency-Check Report — Mozilla Firefox.png](6b841c6c3495c62510d310a2e8eb84e9.png)\n\n報表內含的資訊頗為詳細~  \n往後那怕在有啥Apache(或其他OSS)的Library有漏洞，我們能馬上第一時間得知，進而盡快回應~ 避免成為有心人的開採目標~ 保護好我們的系統~~~   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","category":{"name":"科技 - 軟體"},"tags":[{"slug":"informationSecurity","tagName":"資安"},{"slug":"software-development","tagName":"軟體開發"},{"slug":"apache","tagName":"Apache"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/5bfd398ed09dc25bd93ff866ea4adf8a/b8fd0/35d80968c256ca57b9daa43b098011e3.png"},"fluid":{"src":"/blog/static/5bfd398ed09dc25bd93ff866ea4adf8a/f3dec/35d80968c256ca57b9daa43b098011e3.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":18,"slug":"carrefour-market-chicken","title":"解嘴饞 - 家樂福超市 的 黃金雞腿排","publishedAt":"2021-05-10T10:30:00.000Z","content":"## 再見頂好，你好家樂福\n\n自去年家樂福收購頂好之後，今年頂好門市陸陸續續地都改換上家樂福超市的招牌了，店內內裝格局變化不大，但是商品品項都換成家樂福量販的貨源了(記得之前頂好許多特色品項都是日本進口但也必較貴)。   \n我本就已經是家樂福量販的會員，也在家樂福的線上網站購物過了，更常是周三跑量販狂掃自有品牌商品可以打八折(今年是自有品牌每週三量販滿599,超市滿399就有打八折)，對此更是樂觀其成。   \n以前頂好盡管有些外來的特色商品，但CP值都不高，就算購物後都有許多折價券可供下次使用，但就一直都沒辦法打動我就是了。\n\n## 超市也有熟食\n家樂福量販裡的熟食區最廣為人知的不外乎是整隻的烤雞，個人覺得好吃，但還不到會一直想吃的程度。(對，胖子也挑嘴~~)   \n今天回汐止牙醫回診，路過建成路上的頂好也已經換成家樂福超市有一兩個月了，順道進去逛逛，看到麵包區旁多了個保溫櫃竟然有炸雞，上架數量沒幾個，猜想應該也沒賣很好的樣子，但是接近中午時間，嘴饞就還是買來吃吃看，畢竟分量不大，應該不會重傷害，而且價格也不算貴。\n![P_20210508_112717.jpg](edc8481682ae8dc4b377ac8cc99d475b.jpg)\n\n結完帳帶回車上吃，裡面的肉算是嫩，而且一點也不油，個人猜測應該是先油炸過後再經過氣炸逼油的做法，雞腿排的大小大約比成年男生的手掌不含手指部分在小一點，口感當然是沒有鹹酥雞攤或是肯德基來的油量好吃，外皮看起來乾，但吃起來還好還算酥脆，算是健康清爽，鹹度適中不會過鹹，單單解饞的話算是很稱職的炸雞。\n\n![P_20210508_113558.jpg](7bc7181c9d3d390efa00f2121e72e93e.jpg)   \n\n![P_20210508_113705.jpg](aba817d6a76714eef1311d0efdb15ccb.jpg)   \n\n![_FIX_P_20210508_113622.jpg](212bc9c23ef18e27ada0d4376482874e.jpg)\n\n\n\n## 一起來嘗嘗\n[點這裡](https://www.carrefour.com.tw/stores/) 可以查詢家樂福分店，看看你的出沒區域附近有沒有家樂福~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","category":{"name":"美食 - 食記"},"tags":[{"slug":"carrefour-super-market","tagName":"家樂福超市"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/3d7ba786cfc028a90fd31daa6efe7cca/b8fd0/6a58c42046d45431aa7363498dddb1ab.png"},"fluid":{"src":"/blog/static/3d7ba786cfc028a90fd31daa6efe7cca/2a4de/6a58c42046d45431aa7363498dddb1ab.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":17,"slug":"firefox-shopback-gatsby","title":"Firefox裡安裝的\"Shopback現金回饋小幫手\"擴充套件造成Gatsby網站圖片顯示問題","publishedAt":"2021-04-26T10:00:00.000Z","content":"## 奇怪問題\n這個小小部落格也建立了一小段時間，但其實我在瀏覽我自己這個網站時常遇到一個問題，就是一進入網站的文章列表，其個文章的圖片都會無法顯現。\n\n如下圖所示:\n![2021-04-26 15_48_01-豆腐碎碎念 — Mozilla Firefox.png](1c2653e693f0d7c9fb582c38c03adc69.png)\n\n而且F5重載網頁還是一樣，非得要Ctrl+F5強制重載，圖片才會正常顯現。\n\n經過多次嘗試發現這個問題只有在Firefox會發生，在Chrome和Edge並不會有這一問題。\n\n本以為是Gatsby-plugin-offline和相關快取造成的問題。但是能更改的設定都嘗試過了並沒有改善。\n\n由於Firefox已經是我多年來的瀏覽器首選，我的書籤也都放在Firefox上了，實在不是很想回去使用Chrome巨獸，所以有時開自己的部落格都覺得這小問題很煩，跟蒼蠅一樣的煩啊.....\n\n## Gotcha - 原來是瀏覽器外掛作怪\n今天靈機一動....\n\n「有沒有一種可能？是.. 瀏覽器外掛在搞怪??」想了一下幾個比較可疑的外掛(擴充套件)，一個一個關掉。 果然，兇手就是\"Shopback Cashback Buddy\"這個外掛。\n估計這個外掛會撈取當前葉面並視需要更動DOM內容所以可能才會造成問題~\n\n我想還是先停用這個外掛，一來解決這小問題，二來還省資源。等要蝦拚的時候再開啟外掛來使用。\n\n好~  結案~~\n","category":{"name":"科技 - 軟體"},"tags":[{"slug":"GatsbyJS","tagName":"GatsbyJS"},{"slug":"firefox","tagName":"Firefox"},{"slug":"shopback","tagName":"Shopback"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/38ebd563fb6de67e82dfbc6b4ea005f6/58d74/3326cce2e4fcb6ac9b6305e05a4dca92.jpg"},"fluid":{"src":"/blog/static/38ebd563fb6de67e82dfbc6b4ea005f6/14b42/3326cce2e4fcb6ac9b6305e05a4dca92.jpg"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":16,"slug":"excel-chart","title":"寫程式自動化匯出excel檔案裡的統計圖表(Chart)為圖檔","publishedAt":"2021-04-23T11:30:00.000Z","content":"## 需求\n工作上的開發，大量地使用[Apache POI](https://poi.apache.org/)來產生/操作Excel報表。 \n\n然而針對產生或是讀入的excel檔案，想要匯出其內的統計圖表(Chart)，Apache POI並無提供此功能與API可以達成。  \n\n苦尋了一段時間，一直找不到可以用的Library或工具可以完成這項任務。\n\n\n## OCR GUI automation - SikuliX \n所以換個方向思考，或許有甚麼自動化工具可以達成，於是找到了一套基於螢幕OCR辨識來操作GUI自動化的工具- [SikuliX](http://sikulix.com/)。\n\nSikuli提供了一個IDE工具讓你可以撰寫自動化腳本，腳本的組成會是Python語法和許多螢幕截圖圖片，讓你指定當電腦畫面出現你預期的某些畫面時，會對應操作滑鼠或鍵盤來完成自動化。  \n關於Sikuli更多的介紹，請參考下列:  \n- [SikuliX —— 針對圖形介面寫自動化腳本的小幫手](https://igouist.github.io/post/2020/03/sikulix/)\n- [SikuliX Quickstart](http://sikulix.com/quickstart/)\n\n基於分享與日後使用方便，我已經用SikuliX IDE寫好一組腳本用來自動化擷取XLSX裡的Chart，放在GitHub上了，[請參考這....](https://github.com/dolphlei/exportExcelChartToPng_withSikuliX)  \n\n#### [缺點]\n然而使用SikuliX最大的缺點就是，一定要在有螢幕的電腦執行，還有，自動化執行時不能有螢幕保護程式運行。  \n\n這對於我們很多報表程式都是在Server端執行的環境，幾乎是一大阻礙。\n\n\n## Spire.XLS 組件\n好消息是最近透過同事得知有一套library可以達到不安裝Excel，純粹的使用Java/.NET的API呼叫就可以將 XLS/XLSX裡面的Chart匯出成圖片，這套Library叫做Spire.XLS，是由中國成都冰藍科技開發的。\n\n他有分商業版和免費版，然而將Chart匯出圖片的功能在免費版就有提供了。\n\n實際用了確實也是可行的，真是可喜可賀。\n\n\n#### [缺點]\n然而Spire.XLS也不是萬能的，我手邊有些比較複雜的XLSM Excel報表，其內的Chart是透過開啟Excel文件時啟動VBA巨集(Macro)做了些複雜運算後才動態生成Chart物件的，\n像是這種直接或間接透過巨集執行來動態產生Chart物件或是設定Chart資料來源範圍的檔案，Spire.XLS也是兩手一攤，畢竟這一定要有Excel環境來運行VBA Macro才能得到最後的Chart，這頂多只能回頭看使用SikuiliX能不能達成自動化了。\n\n","category":{"name":"科技 - 軟體"},"tags":[{"slug":"ms-office","tagName":"Ms Office"},{"slug":"excel","tagName":"Excel"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/558a6c2d331872465ae6e4d1b31e05b7/b8fd0/aec811ff934fbde7f9ea62cee989f3a6.png"},"fluid":{"src":"/blog/static/558a6c2d331872465ae6e4d1b31e05b7/2a4de/aec811ff934fbde7f9ea62cee989f3a6.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":15,"slug":"containerize-your-apps-with-docker-and-kubernetes","title":"電子書分享 - Containerize your Apps with Docker and Kubernetes","publishedAt":"2021-04-07T13:30:00.000Z","content":"[Containerize your Apps with Docker and Kubernetes](https://github.com/PacktPublishing/Containerize-your-Apps-with-Docker-and-Kubernetes)\n\n上面的連結是電子書 \"Containerize your Apps with Docker and Kubernetes\" 的範列程式碼github repository。\n\n這本書我剛讀完，算是很入門Docker和K8s很好的資源。\n\n作者把該書的電子檔(EPUB格式; 在頁面的EPUB的資料夾內)也放上去了，有想學Docker的朋友可以去下載回來讀囉~","category":{"name":"科技 - 軟體"},"tags":[{"slug":"docker","tagName":"Docker"},{"slug":"kubernetes","tagName":"Kubernetes"},{"slug":"ebook","tagName":"電子書"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/1c298ccc8044ece5fee9350c893f445e/b8fd0/79b6e09f4cc2eea345c933b47cfa0c5e.png"},"fluid":{"src":"/blog/static/1c298ccc8044ece5fee9350c893f445e/ee604/79b6e09f4cc2eea345c933b47cfa0c5e.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":14,"slug":"article-about-keelung-landslide","title":"一篇詳細介紹基隆幾個大社區的土石流隱憂的專業文章","publishedAt":"2021-04-07T04:00:00.000Z","content":"買房子對於很多年輕人來說是一次All-in的投資，畢竟大筆金錢是耗費自己十幾年甚至幾十年的積累，所以當然要多停看聽~\n\n買房要注意甚麼，多看些SWAY哥的影片就很好入門啦!! (如果你不知道Sway是誰,自己去Youtube找找囉~~ 不過話說基隆的房子也是讓Sway嫌的不要不要的~~)\n\n我從小就在基隆長大，雖然說大部分北部人一提到基隆的房子就脫不了下雨潮濕等負面印象，但對我這個在地老基隆來說到還算小事，畢竟幾十年都習慣了。\n\n其實下雨和潮濕影響到的除了心情或一些皮膚或氣管慢性疾病外，更多人沒注意到的是下雨帶來的天災，特別是首購族都會忽略到這點~\n\n尤其基隆很多山坡地形，很多(愈來愈多)社區都立足於山坡上，這不是說基隆的房子就都不能碰，只是要更加多注意的一一檢視調查各個建案的狀況，下面這篇文章就很專業的詳列出有土石流疑慮的基隆社區，推薦想在基隆置產的朋友參考:\n- [IM5481 - 基隆看房子: 順向坡跟土石流](https://im5481.com/2018/09/07/%E5%9F%BA%E9%9A%86%E7%9C%8B%E6%88%BF%E5%AD%90-%E9%A0%86%E5%90%91%E5%9D%A1%E8%B7%9F%E5%9C%9F%E7%9F%B3%E6%B5%81/)\n","category":{"name":"其他"},"tags":[{"slug":"keelung","tagName":"基隆"},{"slug":"realestat","tagName":"房地產"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/91cef48c04ecb0c42ae6d2089c897e9a/58d74/76349fdbaea20bbf6b8fcaac99bac68a.jpg"},"fluid":{"src":"/blog/static/91cef48c04ecb0c42ae6d2089c897e9a/14b42/76349fdbaea20bbf6b8fcaac99bac68a.jpg"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":13,"slug":"paint-shop-pro-script-before-after","title":"PaintShop Pro指令碼: 幫相片加上邊框和 Before/After文字","publishedAt":"2021-03-09T12:00:00.000Z","content":"## 需求及用途\n不管是想針對事務處理前後的照片，或是針對影像處理前後的照片，\n我們都會有想做出一個有左右對照比較Before和After的圖。  \n\n假如說我有一個原圖如下:  \n![_FIX_beforeafter_original.jpg](78efb59984e0d2ef2f0929ef18bda306.jpg)  \n\n我對這個照片做了影像特效處理，想另外做一個左右BeforeAfter對照圖供別人檢視，如下:  \n![_FIX_combined.jpg](4e1bee5131a4840037c55be88247de44.jpg)  \n\n為了往後能快速地幫圖片加上白色邊框，並且在圖片的角落或中央加上\"Before\"或\"After\"文字，如下:  \n![_FIX_apply_before.jpg](cadada54a3f4af41a83898998f7cefda.jpg)  \n![_FIX_apply_after.jpg](3f8ef81eb28c8d6ee43d2bbd2bbd1a70.jpg)  \n\n所以我使用了PaintShopPro錄製的功能，錄下了Script並做了些為了修改，往後只要開啟其他圖片，執行Script就可以快速套用了。  \n\n如果你不知道PaintShop Pro的Script，簡單的來說它的概念就如同Excel的巨集一般，幫我們把常用的處理動作錄製下來，方便往後能快速的重複執行相同處理作業。\n只是Office錄製出來的巨集是Basic程式語言的Script，而PaintShop Pro錄出來的是Pytohn語言的Script。  \n\n\n## Script程式碼與下載\n程式碼內容及下載，請前往[BeforeAfter_with_Border.PspScript](https://github.com/dolphlei/dolphs_psp_scripts/blob/6e726b31ff9f5945923ca4b3cd49a37ad3c1193e/BeforeAfter_with_Border.PspScript)\n\n\n## 安裝及使用\n請直接將.pspscript檔案複製到 \"C:\\Users\\\\<YOUR_ACCOUNT_NAME>\\Documents\\Corel PaintShop Pro\\<PSP_VERSION>\\信賴的指令碼\" 目錄下，即可在PaintShop Pro中選取執行!!\n\n\n## 參考\n關於PaintShop Pro要如何錄製、執行和編寫Script，請參考:  \n* [Scripting basics](http://help.corel.com/paintshop-pro/how-to/en/official-help/index.html#page/Corel_PaintShop_Pro%2Fscripting_basics.html%23)\n* [How to Use Scripts](https://learn.corel.com/tutorials/how-to-use-scripts/)\n* [PaintShop Pro script API參考](http://help.corel.com/paintshop-pro/v22/en/api/index.html)","category":{"name":"科技 - 軟體"},"tags":[{"slug":"paint-shop-pro","tagName":"PaintShop Pro"},{"slug":"photo-picture-editing","tagName":"影像及圖片 編輯"},{"slug":"paint-shop-pro-script","tagName":"PaintShop Pro Script"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/7a230714b4ea86bedce114e57a670359/502a6/4fd86e337ea6dc06d2a76bd41391f636.png"},"fluid":{"src":"/blog/static/7a230714b4ea86bedce114e57a670359/cc4cc/4fd86e337ea6dc06d2a76bd41391f636.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":12,"slug":"react-js-use-memo-use-callback","title":"ReactJS的useMemo與useCallback","publishedAt":"2021-03-04T10:30:00.000Z","content":"在學習React的Hook時, [官方文件裡對於useMemo和useCallback解釋](https://zh-hant.reactjs.org/docs/hooks-reference.html#usecallback)一直看的不是很懂, 加上在專案的使用率也不多,  \n所以好一段時間都是一知半解的狀況。\n\n直到專案有比較空閒的時候才回頭來研究這兩個Hook適合的用途，在找尋資料時，發現iChef的這篇\"[什麼時候該使用 useMemo 跟 useCallback](https://medium.com/ichef/%E4%BB%80%E9%BA%BC%E6%99%82%E5%80%99%E8%A9%B2%E4%BD%BF%E7%94%A8-usememo-%E8%B7%9F-usecallback-a3c1cd0eb520)\" 解釋的比較白話，也比較能讓人了解適合的使用時機~\n\n另外有時很容易混淆useEffect和useMemo的用途與使用時機及其特性，Stack overflow這篇\"[React: useEffect vs useMemo vs useState](https://stackoverflow.com/questions/56347639/react-useeffect-vs-usememo-vs-usestate?answertab=votes#tab-top)\" 裏頭的答覆指出了:\n* useState --> 會引起re-render\n* uesMemo --> runs **during** the render (if DEP array vars changes)\n* useEffect --> called **after** re-render (if DEP array vars changes)\n\n\n最後，我的習慣是寫code一開始還是不去考量使用useMemo和useCallback，直到最後調整效能時，或是有特殊狀況才會來使用useMemo和useCallback....","category":{"name":"科技 - 軟體"},"tags":[{"slug":"react-js","tagName":"ReactJS"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/e642197a36605f2ea16831d3983d4d7e/58d74/f028fa5e61215d93935b4d35fc1ee126.jpg"},"fluid":{"src":"/blog/static/e642197a36605f2ea16831d3983d4d7e/14b42/f028fa5e61215d93935b4d35fc1ee126.jpg"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":11,"slug":"adj-oven-temp","title":"校正烤箱溫度","publishedAt":"2021-02-26T12:30:00.000Z","content":"## 為何要校正?\n身為烘焙菜雞，做蛋糕失敗是一定必經的道路。 \n但是在每次檢討找尋失敗原因時，很常碰到的就是每個人用的烤箱不同所造成的種種問題(像是蛋糕濕黏、塌陷等...)。 \n通常我們菜雞用的烤箱也不會是專業的，所以烤箱使用時實際達到的溫度很可能常會跟你設定的刻度是對不上的，通常都會是實際溫度不夠。 \n另外在使用好幾年的烤箱也有可能機器零件損耗，變得溫度也不夠。 \n\n溫度不夠沒關係，我們只要把溫度往上調就可以了，但問題是到底要多加幾度才會是正確的溫度呢?? \n就買烤箱專用的溫度計不就好了?? 是阿，但是這溫度計買了肯定使用率是很低的，很是浪費錢。  \n還沒賺錢就先花錢，可以，但是也不應該浪費錢呀~  菜雞們，你們說對嗎?? \n\n\n## 調校\n所以下面這個影片(我先按讚!!)，就教我們簡單用隨手可得的白糖，來測試烤箱的溫差。\n利用砂糖溶點186度，把烤箱逐步調升烤到砂糖融化，得到的烤箱刻度溫度再剪掉186度就是你這台烤箱的溫差了!! \n往後照食譜烘培時，設定烤箱溫度再加上這個溫差就不會有問題了!!  \n\nHappy Cooking!!\n\n\n[![2021-02-26 11_39_01-Window.png](5fdb05266751f84ed4c3160929665fea.png)](https://www.youtube.com/watch?v=G2HJzivzl7s&feature=youtu.be)\n\n","category":{"name":"美食 - DIY"},"tags":[{"slug":"Baking","tagName":"烘焙"},{"slug":"home-elec","tagName":"家電"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/19d701e14c01e5f0e60ee7b6947622cd/b8fd0/5fdb05266751f84ed4c3160929665fea.png"},"fluid":{"src":"/blog/static/19d701e14c01e5f0e60ee7b6947622cd/ee604/5fdb05266751f84ed4c3160929665fea.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":9,"slug":"psp2021-ai-jar-removal","title":"移除 JPEG馬賽克格格 (使用 PaintShop Pro 2021新功能 - AI斑點移除 )","publishedAt":"2021-02-18T12:00:00.000Z","content":"有些網路上找的JPEG圖檔檔壓縮過頭或是經過放大，圖片就會出現明顯的馬賽克格格。   \n\n\n### 嘗試\nPahintShop Pro 2021版的 **AI斑點移除** 功能就能盡量移除這些格格。\n\n\n我們拿 [JPG圖像大小計算原理解釋](https://www.twblogs.net/a/5b88d00c2b71775d1cde6fce)這篇文章裡的圖片來試試這個新功能。\n\n未壓縮原圖長這樣:   \n![_FIX_Original JPEG](718f14c1956a78c7ea31b177ed29f605.jpg)\n\n\n**[INPUT]** 我們拿壓縮過頭的這張圖片來餵給PSP:   \n   ![_FIX_Over loss JPEG](61aaa5ca2494c05d77b3c24e3bf0c993.jpg)\n\n\n**[OUTPUT]** 經過PSP的 **AI斑點移除** 功能，得到的修正圖片如下:   \n   ![_FIX_result JPEG](11ead47011dbc3115cf395c566cd2df9.jpg)\n\n\n### 其他參考\n- 官方 **AI斑點移除** 功能介紹影片: [Removing JPEG Artifacts from Photos](https://learn.corel.com/tutorials/removing-jpeg-artifacts-in-paintshop-pro/)\n\n### 心得\n拿輸出結果來對比未壓縮原圖畫質是糊掉些，但是對比我們餵進去的壓縮圖，算是完美的把馬賽克格格都消除掉了。   \n畢竟JPEG細屬破壞性壓縮，能還原修復成這樣已經很不錯了!!\n","category":{"name":"科技 - 軟體"},"tags":[{"slug":"photo-picture-editing","tagName":"影像及圖片 編輯"},{"slug":"paint-shop-pro","tagName":"PaintShop Pro"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/7a230714b4ea86bedce114e57a670359/502a6/4fd86e337ea6dc06d2a76bd41391f636.png"},"fluid":{"src":"/blog/static/7a230714b4ea86bedce114e57a670359/cc4cc/4fd86e337ea6dc06d2a76bd41391f636.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":10,"slug":"gatsby-js-strapi-markdown","title":"解決GatsbyJS前端網頁無法顯示Strapi markdown文章內嵌圖片問題","publishedAt":"2021-02-18T11:30:00.000Z","content":" **圖片無法顯示問題**\n---------------------\n使用目前版本的 gatsby-source-strapi  plugin，   \n\n若是strapi CMS編輯的Markdown語法內文其內嵌圖片是使用上傳方式上傳至Strapi的*媒體庫*的圖片，   \n\n在Gatsby的前端網頁會顯示不出來 !!!\n\n\n\n\n**解決辦法**\n----------\n1. 依此網頁 [@oddbluedog/gatsby-source-strapi-support-markdown-images](https://www.npmjs.com/package/@oddbluedog/gatsby-source-strapi-support-markdown-images) 步驟使用此plugin取代原官方的gatsby-source-strapi  plugin\n2. 再參考 [這個頁面](https://github.com/strapi/gatsby-source-strapi/pull/122#issuecomment-612969087) 裡的程式碼來做設定及使用\n3. 好了 解決囉~\n\n\n\n","category":{"name":"科技 - 軟體"},"tags":[{"slug":"GatsbyJS","tagName":"GatsbyJS"},{"slug":"Strapi","tagName":"Strapi"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/83d8363909eea0b4eaeeb217a6cedc20/b8fd0/1c2bfaf2d5f6ce22df404627a5abaa7a.png"},"fluid":{"src":"/blog/static/83d8363909eea0b4eaeeb217a6cedc20/33964/1c2bfaf2d5f6ce22df404627a5abaa7a.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":8,"slug":"tj-free-inscape-videos","title":"推薦Inkscape教學影片","publishedAt":"2021-02-04T06:30:00.000Z","content":"要製作向量圖片對於我們業餘的使用者來說不論是Adobe Illustrator或是CorelDraw價格上都是負擔不起的，\n而Inkscape這套開源軟體基本功能齊全，可以替代Illustrator或是CorelDraw，其功能方面業餘者用起來就綽綽有餘了。\n\n而要入門學會Inkscape這套軟體的使用技巧，現在連買書都不用了，\n[TJ Free頻道](https://www.youtube.com/channel/UCx-ljiKQcLSd8_4AFi_yaIw \"TJ Free頻道\") 出的[這套教學影片](https://www.youtube.com/playlist?list=PLqazFFzUAPc5lOQwDoZ4Dw2YSXtO7lWNv \"TJ Free Inkscape Tutorials\")就囊括了所有使用Inkscape使用技巧，完全免費，\n只要有基本程度的英文聽讀能力，就一定看得懂，推薦想學Inkscape可以看看!!\n\n- 影片播放清單:\n    - [https://www.youtube.com/playlist?list=PLqazFFzUAPc5lOQwDoZ4Dw2YSXtO7lWNv](https://www.youtube.com/playlist?list=PLqazFFzUAPc5lOQwDoZ4Dw2YSXtO7lWNv \"TJ Free Inkscape Tutorials\")\n    - [![TJ Free Inkscape Tutorials](e1a86790530a81942daa97f2c942e133.jpg)](https://www.youtube.com/playlist?list=PLqazFFzUAPc5lOQwDoZ4Dw2YSXtO7lWNv)\n\n\n","category":{"name":"科技 - 軟體"},"tags":[{"slug":"photo-picture-editing","tagName":"影像及圖片 編輯"},{"slug":"Inkscape","tagName":"Inkscape"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/3d6ecfdb88caaa4cd078454b9e95dd50/b8fd0/98feaf3031e8c9fd36637621751b81a5.png"},"fluid":{"src":"/blog/static/3d6ecfdb88caaa4cd078454b9e95dd50/ee604/98feaf3031e8c9fd36637621751b81a5.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}},{"node":{"strapiId":7,"slug":"gatsby-js-strapi-git-hub-pages","title":"GatsbyJS + Strapi + GitHub Pages快速上手, 還有Azure Static Web Apps... ","publishedAt":"2021-02-01T04:00:00.000Z","content":"Azure Static Web App\n=================\n\n起源\n-----\n故事從我最近在Azure Cloud裡面看到一個新的服務開始: [Azure static web apps](https://azure.microsoft.com/zh-tw/services/app-service/static \"Azure static web apps\")。\n\n本有點納悶最簡單的hosting靜態網頁，了無新意，放進Azure幹嘛?? \n\n但看了介紹之後發現, 這組服務的功能基本上會比較像是[GitHub Pages](https://pages.github.com/ \"GitHub Pages\")，\n而Deploy流程會是將其主要網頁內容檔案使用Git控管放上GitHub repository後，在每次git push進GitHub 的repository後經由觸發Action後將網頁檔案資源上到Azure Static Web App，\n當然上述的網頁資源可以是簡單的HTML，也可以是含有HTML/JS/CSS/image等檔案的 ReactJS/Angular/Vue 程式。\n\n![AzureStaticWebApps](https://azurecomcdn.azureedge.net/cvt-aa77de8d08c7abaf5307d82c869eaab798030946ed7a71c45d007fea97171722/images/page/services/app-service/static/value-prop-2.png)\n\n\n優點\n-----\n那麼, 我們就用GitHub Pages就好啦, 幹嘛還要Azure static webapps??\n\n我想有人注意到上圖的\"Api Azure Function\"了，在功能上Azure Static Web Apps能強過於(或說更方便於)GitHub Pages，\n就是他幫你把後端的API server都準備好了(是使用Azure Functions serverless服務)，也整合好了(**代表靜態網頁和API的endpoint會在同一個domain URL下,可以避免Cross domain問題**)。\n\n對於開發前端應用的人，如果你今天用了ReactJS/ Angular / Vue等框架開發了應用，同時也需要有後端的API供你的前端應用在運行時可以呼叫，那這組Azure static webapps使用起來應該會相當方便!!\n\n目前Azure Static Web app還在Preview階段，是完全免費的，有興趣可以體驗看看!!\n\n\n進一步\n--------\n再進一步的瀏覽Azure Static Web App相關網頁及文件，看到這兩篇:\n\n- [使用 Gatsby 和 Azure Static Web Apps 建立及發佈靜態 Web 應用程式](https://docs.microsoft.com/zh-tw/learn/modules/create-deploy-static-webapp-gatsby-app-service/ \"使用 Gatsby 和 Azure Static Web Apps 建立及發佈靜態 Web 應用程式\")\n- [教學課程：將 Jekyll 網站發佈至 Azure Static Web Apps Preview](https://docs.microsoft.com/zh-tw/azure/static-web-apps/publish-jekyll \"教學課程：將 Jekyll 網站發佈至 Azure Static Web Apps Preview\")\n\n於是發現了有趣的工具: 靜態網站產生器(static web site generator / blog generator)。\n\n****\n\n關於 靜態網站產生器/部落格產生器\n============================\n上面文章的兩個Generator: GatsbyJS 和 Jekyll，其中Jekyll是基於Ruby生態系的，而GatsbyJS是基於JS和ReactJS生態系的。\n\nGenerator是要做啥用呢?\n\n\n我們先來回想網站的網頁通常是怎麼生成的:\n- 比較古早的架構的做法\n  1. 使用者開啟瀏覽器造訪網站網址開啟網頁\n  2. Server端程式透過ASP/JSP/PHP等或其他框架程式即時撈取後端資料來源 (可能是DB或是API等來源) 來生成最終靜態網頁\n\n- 比較新的架構做法 \n  1. 使用者開啟瀏覽器造訪網站網址開啟網頁  \n  2. 網站回復靜態前端網頁UI及程式檔案(HTML/CSS/JS; 此處程式可能有使用Anrular/ReactJS/Vue等框架或是其他JS library)\n  3. 接著前端的JS程式在Client端瀏覽器執行, 並即時撈取後端資料來源(通常透過Restful或GraphQL呼叫API)，動態生成DOM呈現最終網頁內容\n\n上列不管哪種做法，都會發現到 **\"資料撈取\"** 這個動作都會是在使用者造訪網頁時 **\"即時\"** 執行的。\n這可以保證使用者看到的都是最新的最即時的資料。\n\n\n然而與單純的靜態網頁相比:\n- 動態網頁每次造訪時都要有存取資料的動作，故一定會要額外多花時間存取資料，所以就會比較慢一點點。 (我們先屏除考量快取機制)\n- 既然是要放動態網頁，那麼Hosting這些網頁的主機勢必就要支援對應的後端語言環境(如Java /.net / PHP)等，如果是自己公司的主機要裝啥都好解決，但如果是要放在其他代管主機廠商或是雲端環境，就要注意是否支援所需的環境。由於需要有動態環境的支援，相對的Hosting部分也會多些花費。\n\n\n然而有些網站類型，如 部落格 或是 展示型的企業網站， 後端資料內容更新並不算頻繁。\n我們換個方向來思考: 如果我們在每次更新後端資料內容時，做一次build動作來混合後端資料來源與前端UI，產生最終的 **靜態網頁檔案** ，並將這些靜態網頁檔案Hosting上網路空間，那麼一來可以省掉動態主機的花費，二來使用者在瀏覽網頁時也更加快速(因為不用撈後端資料了)，這也不失為一個好的解決方案~~\n\n回神!!  我們剛剛問題點是: Generator是做啥用的?? 對~~ 就是上面這個用法~~  幫我們拿來產生靜態網頁用的。\n\n如果有些年紀的人有用過Teleport pro這套砍站下載以供離線瀏覽的軟體，大概就可以把Generator在build時做的事情比擬是Teleport在把整個網站的所有網頁下載下來一般。只是Teleport是把載下來的靜態網頁放電腦裡慢慢看，而我們用Generator產生的靜態網頁，是要進一步Deploy靜態網頁空間上去，供大眾瀏覽的~~\n\n\n前述的兩套Generator，Jekyll會比較簡單易用，GatsbyJS學習曲線就會較陡峭。\nGatsbyJS建議要有ReactJS的基本技能，用起來才會比較順手。\n\n兩個工具的詳細比較，可以參考:\n- [How Not to Go Wrong When Choosing a Static Website Generator? Gatsby vs Jekyll](https://medium.com/javascript-in-plain-english/how-not-to-go-wrong-when-choosing-a-static-website-generator-gatsby-vs-jekyll-510cea59e6e1 \"How Not to Go Wrong When Choosing a Static Website Generator? Gatsby vs Jekyll\")\n- [Comparison of Gatsby vs Jekyll vs Hugo](https://www.gatsbyjs.com/features/jamstack/gatsby-vs-jekyll-vs-hugo \"Comparison of Gatsby vs Jekyll vs Hugo\")\n \n個人選擇GatsbyJS是因為我對JS生態系比較熟，也有開發ReactJS應用的經驗，另外GatsbyJS經由Plugin可以支援GraphQL。\n\nGatsbyJS是透過Plugin的概念來支援各種資料來源類型，在build時配合這些Plugin就可以存取到你的後端資料。 當然除了資料存取功能外，Plugin還能達到其他類型目的的功能(如SASS支援等)。舉凡在做Build時要額外做處理的部分都可以透過Plugin做擴充。\n\n[GatsbyJS的Plugin Library](https://www.gatsbyjs.com/plugins \"GatsbyJS的Plugin Library\") ← 點這\n\n****\n\n Headless CMS - Strapi\n==================\n有了GatsbyJS這工具來做自己的Blog前端頁面，那麼後端呢??\n\n我的後端除了要是個部落格內容的資料庫外，我還希望這後台還要提供有基本的文章內容編輯功能~~\n\n咦?? 這種自助式前台展示，後端編輯的概念不就是現行CMS(Content Management System)的型式了嗎??\n\n只是我們並不需要CMS的前台展示部分，因為透過GatsbyJS和ReactJS我們可以高度客製化我們的前端頁面長成怎麼個樣子~~  不必受限於CMS制式或是受限的前端樣板!!\n\n\n所以我們需要的是一個帶後台資料庫及後台編輯功能的CMS，並且這個CMS能提供API讓我們的GatsbyJS和ReactJS在執行build靜態頁面時可以撈取CMS後台所編輯的文章資料庫內容。\n這個僅有後台，不提供前台頁面的CMS產品就叫做無頭的(Headless) CMS。\n\n經由參考\n[Build a static blog with Gatsby and Strapi](https://strapi.io/blog/build-a-static-blog-with-gatsby-and-strapi \"Build a static blog with Gatsby and Strapi\")\n這篇文章，得知了[Strapi](https://strapi.io/)這套基於Node.JS的開源CMS~~\n\n且依循了上列文章的引導執行下列指令生成Strapi專案檔案:\n\n        `npx create-strapi-app backend  --quickstart --template https://github.com/strapi/strapi-template-blog`\n\n上列指令利用了Strapi提供的樣板的概念，使我們建立起來的Strapi專案就包含樣板作者預先幫我們建立好的資料結構(Article, Category, User, Writer.. 等資料結構)。讓我們快速上手生成我們所需要的Blog後台。 \n*(P.S. 這裡所謂的CMS的資料結構，可以理解為資料庫的Table。)*\n\n由於只有我自己一個人維護Blog內容，所以我就在我的本機跑Strapi就夠用了。 如果有需要多人協作(如多人共筆寫Blog文章) ，可以嘗試把Strapi架在內網主機上，或是雲端主機上。\n\n如果懶得自己架設CMS主機，那麼也可以考慮像是[Contentful CMS](https://www.contentful.com)這種線上服務。Gatsby也有Plugin銜接存取Contentful CMS。Contentful CMS有免費方案的，也有收費方案的，[詳情參考這裡](https://www.contentful.com/pricing/ \"Contentful Pricing\")← \n\nStrapi支援Restful和GraphQL的API型式接口，詳請參閱Strapi官方文件~~\n在Strapi內部資料儲存方面，支援的資料庫目前有SQLite, PostgreSQL, MySQL, MongoDB ，沒有特別配置的話，預設使用SQLite。一樣詳請參閱Strapi官方文件~~\n\n\n****\nGitHub Pages\n===========\nGitHub Pages的功能就是把GitHub當作靜態網頁空間來用。用Git push來取代FTP上傳網頁檔案，而且不用花錢!! 重點是，頗有工程師的Style ( 阿嘶 )~~\n\n所以我們連開Azure static web apps都不用了(畢竟目前我的Blog也用不到Azure Functions API部分)。\n\n關於GitHub Pages這邊有篇詳盡的介紹 [從零開始: 用github pages 上傳靜態網站](https://medium.com/%E9%80%B2%E6%93%8A%E7%9A%84-git-git-git/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B-%E7%94%A8github-pages-%E4%B8%8A%E5%82%B3%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-fa2ae83e6276) 我沒辦法寫得比這篇好，所以請各位就看這篇介紹囉~~\n\n\n****\n最後\n====\n社群網站當道的年代，訊息充滿留言牆，訊息產生的快，也流逝的快。但說真的要能**專心**的寫些比較冗長的文章，還是部落格比較合適!!\n\n\n部落格平台從崛起、興盛，到一家一家收掉，我們這代可說是參與了部落格一生的各個階段~~\n與其擔心哪天自己使用的部落格平台會面臨衰亡，倒不如可以考慮這篇文章的方案，完整掌握自己的部落格網站，省的哪天要為自己的部落格文章搬家~~\n\n當前這個Blog站台就是使用 GatsbyJS + Strapi + GitHub Pages 建立起來的。\n有讓你也想自己建個站台了嗎??  一起動手試試看喔!!!\n\n\n\n\n\n","category":{"name":"科技 - 軟體"},"tags":[{"slug":"Strapi","tagName":"Strapi"},{"slug":"GatsbyJS","tagName":"GatsbyJS"}],"image":{"childImageSharp":{"fixed":{"src":"/blog/static/83d8363909eea0b4eaeeb217a6cedc20/b8fd0/1c2bfaf2d5f6ce22df404627a5abaa7a.png"},"fluid":{"src":"/blog/static/83d8363909eea0b4eaeeb217a6cedc20/33964/1c2bfaf2d5f6ce22df404627a5abaa7a.png"}}},"author":{"name":"豆腐","picture":{"childImageSharp":{"fixed":{"src":"/blog/static/814afda129be66d802b5e2e6878690ab/91664/68ec1329a0c03ec83fd29493e1db9bf2.png"}}}}}}]}}}